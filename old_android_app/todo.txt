# Todo list

## Fix address loading

- store Address and Last Address Update in Photo in the database
- implement setAddressUpdateTimestamp() and updateAddress()

## Implement photo editing and deleting

- Add a save/delete panel in the roll activity with Save and Delete buttons
- Make items in the photo list selectable (one at a time)
- When an item is selected, go to edit mode:
    - hide the snap panel and show the save/delete panel
    - load the item data into the fields
- When clicking save or delete, deselect the item and reset the fields

## Refactor the database to allow for sync

- make everything in the database use UUID's instead of IDs, so there aren't
  collisions with IDs on different devices
- add a last_change column to all items which is milliseconds since 1970-01-01 00:00 UTC
- don't actually "delete" items - instead add an "is_deleted" column, and make
  all selects match only not deleted items. when adding a new item, find an
  old deleted item and resurrect it. only add a new one if there's no old one
  available.
- add an isSynced flag to all items


# Sync procedure

- step 1: perform a Get using the max last_change of items marked as synced.
  Update all items whose received last_changed is newer than local. 
  Add any items which are not locally present.
- step 2: push all items whose local last_changed is greater than the one
  one we used for get.

# Sync api

get an url in the form: https://foo.example.com/bla/bla/#/some_space_key

* /get:
    request:
        {
            "spaces": ["space1_key", "space2_key" ...],
            "last_change": 12345
        }

    response:
        {
            "records": [
                {
                    "space": "space_key",
                    "key": "record_key",    // must be unique for this space
                    "last_change": 12345,   // number of milliseconds since epoch
                    "data": {}
                }

                ...
            ],
            "last_change": 12345            // last change of all records in the space
                                            // equal to max(last_change forall records)
        }

* /push
    request:
        {
            "records": [
                {
                    "space": "space_key",
                    "key": "record_key",    // must be unique for this space
                    "last_change": 12345,   // number of milliseconds since epoch
                    "data": {}
                }

                ...
            ]
        }
    response:
        "ok"
